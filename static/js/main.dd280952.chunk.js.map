{"version":3,"sources":["CellUpdater.js","Crocodile.js","Flag.js","Cell.js","CellGenerator.js","YouWin.js","Grid.js","game.js","bigCroc.js","Layout.js","index.js"],"names":["CellUpdater","cells","forEach","cell","crocodile","hidden","a","b","i","length","hiddenCells","filter","changedCount","x","includes","y","neighbour","number","this","revealCells","clickedCell","flagged","Crocodile","src","alt","className","Flag","Cell","props","data","content","onClick","e","onContextMenu","React","Component","CellGenerator","dimension","array","push","coordinates","obj","Math","random","crocodiles","c","YouWin","show","Modal","newCells","screenSize","window","innerWidth","Grid","state","showYouWin","startTimer","safeCells","every","gameWon","stopTimer","setState","event","cellUpdater","slice","type","endGameUpdate","leftClickUpdate","preventDefault","rightClickUpdate","endGame","sqrt","cellCount","rows","map","key","handleClick","resetTimer","hideYouWin","resetGame","Game","useState","seconds","setSeconds","minutes","setMinutes","intervalId","setIntervalId","countUp","currentSecond","second","currentMinute","formattedNumber","setInterval","clearInterval","BigCroc","Layout","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dd280952.chunk.js","sourcesContent":["class CellUpdater {\n  endGameUpdate(cells) {\n    cells.forEach(function(cell) {\n      if (cell.crocodile) {\n        cell.hidden = false;\n      }\n    });\n  }\n\n  arraysEqual(a, b) {\n    for (let i = 0; i < a.length; ++i) {\n      return a[i] === b[i];\n    }\n    return true;\n  }\n\n  revealCells(cells) {\n    const hiddenCells = cells.filter(cell => cell.hidden && !cell.crocodile);\n    let changedCount = 0;\n\n    hiddenCells.forEach(function(a) {\n      const neighbours = cells.filter(function(b) {\n        if (a === b) {\n          return false;\n        } else if (\n          [b.x - 1, b.x, b.x + 1].includes(a.x) &&\n          [b.y - 1, b.y, b.y + 1].includes(a.y)\n        ) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n\n      const magicNeighbours = neighbours.filter(\n        neighbour => neighbour.number === 0 && !neighbour.hidden\n      );\n\n      if (magicNeighbours.length > 0) {\n        a.hidden = false;\n        changedCount += 1;\n      }\n    });\n\n    if (changedCount > 0) {\n      this.revealCells(cells);\n    }\n  }\n\n  leftClickUpdate(cells, clickedCell) {\n    cells.forEach(function(cell) {\n      if (cell === clickedCell) {\n        cell.hidden = false;\n      }\n    });\n\n    this.revealCells(cells);\n  }\n\n  rightClickUpdate(cells, clickedCell) {\n    cells.forEach(function(cell) {\n      if (cell === clickedCell) {\n        cell.flagged = !cell.flagged;\n      }\n    });\n  }\n}\n\nexport default CellUpdater;\n","import React from \"react\";\n\nfunction Crocodile() {\n  return <img src=\"crocodile.png\" alt=\"crocodile\" className=\"crocodile\" />;\n}\n\nexport default Crocodile;\n","import React from \"react\";\n\nfunction Flag() {\n  return (\n    <img src=\"flag.jpg\" alt=\"flag\" className=\"flag\"/>\n  )\n}\n\nexport default Flag;\n","import React from \"react\";\nimport Crocodile from \"./Crocodile\"\nimport Flag from \"./Flag\"\n\nclass Cell extends React.Component {\n\n  content() {\n    if (this.props.data[\"flagged\"]) {\n      return <Flag/>\n    } else if (this.props.data[\"hidden\"]) {\n      return null\n    } else if (this.props.data[\"crocodile\"]) {\n      return <Crocodile/>\n    } else {\n      return this.props.data[\"number\"]\n    }\n  }\n\n  render() {\n    const content = this.content()\n\n    return(\n      <button className=\"square\" onClick={(e) => this.props.onClick(e)} onContextMenu={(e) => this.props.onClick(e)}>\n        {content}\n      </button>\n    )\n  }\n\n}\n\nexport default Cell;\n","class CellGenerator {\n  constructor(dimension) {\n    this.dimension = dimension;\n  }\n\n  coordinates() {\n    let array = [];\n\n    for (let x = 0; x < this.dimension; x++) {\n      for (let y = 0; y < this.dimension; y++) {\n        array.push({\n          x: x,\n          y: y\n        });\n      }\n    }\n\n    return array;\n  }\n\n  cells() {\n    let coordinates = this.coordinates(3);\n\n    coordinates.forEach(obj => (obj.crocodile = Math.random() < 0.2));\n    coordinates.forEach(obj => (obj.hidden = true));\n    coordinates.forEach(obj => (obj.flagged = false));\n\n    coordinates.forEach(function(a) {\n      const neighbours = coordinates.filter(function(b) {\n        if (a === b) {\n          return false;\n        } else if (\n          [b.x - 1, b.x, b.x + 1].includes(a.x) &&\n          [b.y - 1, b.y, b.y + 1].includes(a.y)\n        ) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n\n      const crocodiles = neighbours.filter(function(c) {\n        return c.crocodile;\n      });\n\n      if (!a.crocodile) {\n        a.number = crocodiles.length;\n      }\n    });\n\n    return coordinates;\n  }\n}\n\nexport default CellGenerator;\n","import React from \"react\";\nimport { Modal } from \"react-bootstrap\";\n\nconst YouWin = ({ show, onClick }) => {\n  return (\n    <Modal show={show} className=\"you-win-modal\" onClick={onClick}>\n      <button className=\"close\">\n        <span className=\"float-right close-icon\">&times;</span>\n      </button>\n      <div className=\"text-center croctastic\">Croctastic!</div>\n    </Modal>\n  );\n};\n\nexport default YouWin;\n","import React, { Fragment } from \"react\";\nimport CellUpdater from \"./CellUpdater\";\nimport Cell from \"./Cell\";\nimport CellGenerator from \"./CellGenerator\";\nimport YouWin from \"./YouWin\";\n\nfunction dimension() {\n  const screenSize = window.innerWidth;\n  if (screenSize < 400) {\n    return 8;\n  } else if (screenSize < 500) {\n    return 12;\n  } else {\n    return 15;\n  }\n}\n\nfunction newCells() {\n  return new CellGenerator(dimension()).cells();\n}\n\nclass Grid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cells: newCells(),\n      showYouWin: false\n    };\n    this.props.startTimer();\n  }\n\n  safeCells() {\n    return this.state.cells.filter(cell => !cell.crocodile);\n  }\n\n  gameWon() {\n    return this.safeCells().every(cell => !cell.hidden);\n  }\n\n  endGame() {\n    if (this.gameWon()) {\n      this.props.stopTimer();\n      this.setState({ showYouWin: true });\n    }\n  }\n\n  handleClick(event, clickedCell) {\n    const cellUpdater = new CellUpdater();\n    let cells = this.state.cells.slice();\n\n    if (event.type === \"click\" && clickedCell.crocodile) {\n      cellUpdater.endGameUpdate(cells);\n      this.props.stopTimer();\n    } else if (event.type === \"click\") {\n      cellUpdater.leftClickUpdate(cells, clickedCell);\n    } else {\n      event.preventDefault();\n      cellUpdater.rightClickUpdate(cells, clickedCell);\n    }\n\n    this.setState({ cells: cells });\n    this.endGame();\n  }\n\n  cellCount() {\n    return this.state.cells.length;\n  }\n\n  dimension() {\n    return Math.sqrt(this.cellCount());\n  }\n\n  rows() {\n    let rows = [];\n\n    for (let i = 0; i < this.cellCount(); i += this.dimension()) {\n      rows.push(this.state.cells.slice(i, i + this.dimension()));\n    }\n\n    return rows.map(cells => (\n      <div className=\"board-row\" key={cells[0][\"x\"]}>\n        {cells.map(cell => (\n          <Cell\n            onClick={e => this.handleClick(e, cell)}\n            data={cell}\n            key={`${cell[\"x\"]}, ${cell[\"y\"]}`}\n          />\n        ))}\n      </div>\n    ));\n  }\n\n  resetGame() {\n    this.props.stopTimer();\n    this.setState({ cells: newCells() });\n    this.props.resetTimer();\n    this.props.startTimer();\n  }\n\n  hideYouWin() {\n    this.setState({ showYouWin: false });\n  }\n\n  render() {\n    const rows = this.rows();\n\n    return (\n      <Fragment>\n        <YouWin\n          show={this.state.showYouWin}\n          onClick={() => this.hideYouWin()}\n        />\n        <div className=\"grid\">{rows}</div>\n        <div>\n          <button className=\"new-game\" onClick={() => this.resetGame()}>\n            New Game\n          </button>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default Grid;\n","import React, { useState, Fragment } from \"react\";\nimport Grid from \"./Grid\";\n\nconst Game = () => {\n  const [seconds, setSeconds] = useState(0);\n  const [minutes, setMinutes] = useState(0);\n  const [intervalId, setIntervalId] = useState(null);\n\n  const newSecond = second => {\n    if (second > 0 && second % 60 === 0) {\n      setMinutes(currentMinute => currentMinute + 1);\n      return 0;\n    } else {\n      return second + 1;\n    }\n  };\n\n  const countUp = () => {\n    setSeconds(currentSecond => newSecond(currentSecond));\n  };\n\n  const formattedNumber = number => (\"0\" + number).slice(-2);\n\n  const start = () => {\n    const intervalId = setInterval(countUp, 1000);\n    setIntervalId(intervalId);\n  };\n\n  const stop = () => {\n    clearInterval(intervalId);\n  };\n\n  const reset = () => {\n    setSeconds(0);\n    setMinutes(0);\n  };\n\n  const Timer = () => {\n    return (\n      <div className=\"timer text-center\">\n        {formattedNumber(minutes)}:{formattedNumber(seconds)}\n      </div>\n    );\n  };\n\n  return (\n    <Fragment>\n      <Timer />\n      <Grid\n        className=\"grid\"\n        startTimer={start}\n        stopTimer={stop}\n        resetTimer={reset}\n      />\n    </Fragment>\n  );\n};\n\nexport default Game;\n","import React from \"react\";\n\nfunction BigCroc() {\n  return <img src=\"crocodile.png\" alt=\"crocodile\" className=\"big-croc\" />;\n}\n\nexport default BigCroc;\n","import React from \"react\";\nimport Game from \"./game\";\nimport BigCroc from \"./bigCroc\";\n\nclass Layout extends React.Component {\n  render() {\n    return (\n      <div className=\"game-container\">\n        <BigCroc />\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default Layout;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Layout from \"./Layout\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<Layout />, document.getElementById(\"root\"));\n"],"sourceRoot":""}